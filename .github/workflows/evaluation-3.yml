
name: 'Benchmark - 3'

on:
  workflow_dispatch:
    inputs:
      node_count_input:
        description: 'Node Count'     
        required: true
        type: choice
        default: '3'
        options: 
        - '3'
        - '6'
        - '9'
        - '12'
      #parallel_input:
      #  description: 'Max Parallel Jobs'     
      #  required: true
      #  type: Number
      #  default: 1
      #  options: 
      #  - '1'
      #  - '2'
      #  - '3'
      #  - '4'

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    timeout-minutes:  240
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        scenario: ["baseline"] # "baseline", "advanced-mongo", "distributed-gundb"]
        latency: ["with-latency"] #, without-latency]
        node_count: ["${{ github.event.inputs.node_count_input }}"] #, 6]
    defaults:
      run:
        working-directory: infrastructure
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Credential
      run: echo $GCE_CREDENTIALS | base64 -di > ./credentials.json
      env:
        GCE_CREDENTIALS: '${{ secrets.GCE_CREDENTIALS }}'

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@master
      with:
        # project_id: "dspj-315716"
        project_id: "syncmesh-339810"
        service_account_key: ${{ secrets.GCE_CREDENTIALS }}
        export_default_credentials: true

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    # - name: Terraform Format
    #   run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -var public_access=false -var scenario="${{ matrix.scenario }}" -var instance_scenario="${{ matrix.latency }}-${{ matrix.node_count}}" -var machine_type="n1-standard-1" -out tfplan
    - name: Make dir
      run: mkdir /tmp/ipynb
    - name: Create directory
      run: mkdir /tmp/logoutput 
    - name: Terraform Apply
      run: terraform apply tfplan

    - name: Wait for experiment end
      run: |
        ip=`cat orchestrator.txt`
        while ! ssh -i ./orchestrator.pem -o StrictHostKeyChecking=no orchestrator@$ip test -f /captures.zip
        do
          echo "Probe if experiment has ended"
          sleep 60
        done
      timeout-minutes: 240

    - name: Set up Python 
      uses: actions/setup-python@v2

    - name: Install conda environment
      uses: conda-incubator/setup-miniconda@v2
      with:
        activate-environment: python3

    - name: Install dependencies
      working-directory: evaluation
      run: | 
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        sudo apt install tshark -y     

    - name: Query Data
      working-directory: evaluation
      run: papermill 1_QueryData.ipynb /tmp/ipynb/1_QueryData.ipynb -p experiment "experiment-${{ matrix.scenario }}-${{ matrix.latency }}-${{ matrix.node_count}}" -p ci "true"
        
    - name: Prepare Data
      if: always()
      working-directory: evaluation
      run: papermill 02_PrepareData.ipynb /tmp/ipynb/02_PrepareData.ipynb -p ci "true"

    - uses: actions/upload-artifact@master
      if: always()
      with:
        name: output-${{ matrix.scenario }}-${{ matrix.latency }}-${{ matrix.node_count}}
        path: /tmp/ipynb
    - uses: actions/upload-artifact@master
      if: always()
      with:
        name: data-${{ matrix.scenario }}-${{ matrix.latency }}-${{ matrix.node_count}}
        path: ./evaluation/data/
    - name: Terraform Destroy
      if: always()
      run: terraform destroy -auto-approve
    - uses: actions/upload-artifact@master
      if: always()
      with:
        name: gcp-output-${{ matrix.scenario }}-${{ matrix.latency }}-${{ matrix.node_count}}
        path: /tmp/logoutput
  bundle:
    if: always()
    name: 'Bundle'
    runs-on: ubuntu-latest
    needs: [terraform]
    timeout-minutes:  240
    defaults:
      run:
        shell: bash

    steps:
    - uses: actions/download-artifact@v2
      if: always()
      with:
        path: ./artifacts
    - uses: actions/upload-artifact@master
      if: always()
      with:
        name: bundle
        path: ./artifacts
    # - uses: actions/upload-artifact@master
    #   if: always()
    #   with:
    #     name: out
    #     path: ./evaluation/out/
